#|==============================================================================

Random Number Generator Testing - v1.00

Author: Alec Dee - alecdee.github.io - akdee144@gmail.com

--------------------------------------------------------------------------------
About

To compile, run
cat randomtest.unl random.unl print.unl > rand_test.unl
./unileq rand_test.unl
|#

0 0 random.test

random.output.test:
	#Get the return address.
	.ret  .ret  ?+1
	.ret  .z-2  ?+1
	.ret  0     ?+1
	0     0     ?+1
	#Setup our main loop.
	.i    .i0   ?+1
	0 ? print 104 97 115 104 105 110 103 32 0-1 .i 32 111 117 116 112 117 116 115 10 0
	0 ? random.seed 0
	.hash .hash .loop+3
.loop:
	.i    .z+1 .done
	#Get a random number and hash it.
	0 ? random.get .get
	.hash .get  ?+1
	.tmp  .z+1  ?+1
	.tmp  .hash ?+1
	.hash .tmp  ?+7
	.hash .inc0 ?+1
	.tmp  .tmp  .loop
	.hash .inc1 ?+1
	.tmp  .tmp  .loop
.done:
	#Compare the hased result with the precomputed result.
	0 ? print 99 97 108 99 117 108 97 116 101 100 58 32 0-1 .hash 10 0
	0 ? print 101 120 112 101 99 116 101 100 32 32 58 32 0-1 .expect 10 0
	.hash .expect ?+1
	.hash .z .passed
	0 ? print 102 97 105 108 101 100 10 0
	0-1 0 0
.passed:
	0 ? print 112 97 115 115 101 100 10 10 0
	0 0 .ret:0
#Variables
.i:0
.i0:0-10000000
.tmp:0
.hash:0
.get:0
.inc0:0x30d1f2bd3a4cc8ae
.inc1:0xa377912103273f8b
.expect:16759720832878033726
0-2 0-1 .z:0 1

random.jump.test:
	#Get the return address.
	.ret  .ret  ?+1
	.ret  .z-2  ?+1
	.ret  0     ?+1
	0     0     ?+1
	#Setup our main loop.
	.i    .i0   ?+1
	0 ? print 104 97 115 104 105 110 103 32 0-1 .i 32 106 117 109 112 115 10 0
	0 ? random.seed 0
	.hash .hash .loop+3
.loop:
	.i    .z+1 .done
	0 ? random.get .seed
	0 ? random.get .jump
	0 ? random.seed .seed
	0 ? random.jump .jump
	0 ? random.get .seed
	.hash .seed ?+1
	.tmp  .z+1  ?+1
	.tmp  .hash ?+1
	.hash .tmp  ?+7
	.hash .inc0 ?+1
	.tmp  .tmp  .loop
	.hash .inc1 ?+1
	.tmp  .tmp  .loop
.done:
	0 ? print 99 97 108 99 117 108 97 116 101 100 58 32 0-1 .hash 10 0
	0 ? print 101 120 112 101 99 116 101 100 32 32 58 32 0-1 .expect 10 0
	.hash .expect ?+1
	.hash .z .passed
	0 ? print 102 97 105 108 101 100 10 0
	0-1 0 0
.passed:
	0 ? print 112 97 115 115 101 100 10 10 0
	0 0 .ret:0
#Variables
.i:0
.i0:0-10000
.tmp:0
.hash:0
.seed:0
.jump:0
.inc0:0x30d1f2bd3a4cc8ae
.inc1:0xa377912103273f8b
.expect:5350293282862816422
0-2 0-1 .z:0 1

random.mod.test:
	#Get the return address.
	.ret  .ret  ?+1
	.ret  .z-2  ?+1
	.ret  0     ?+1
	0     0     ?+1
	#Setup our main loop.
	.i    .i0   ?+1
	0 ? print 104 97 115 104 105 110 103 32 0-1 .i 32 114 97 110 100 111 109 32 109 111 100 115 10 0
	0 ? random.seed 0
	.hash .hash .iloop+3
.iloop:
	.i    .z+1 .idone
	#Get our shift value.
	0 ? random.get .rand
	.shr  .shr  ?+1
	.shr  .z-2  ?+1
	.j    .j0   ?+1
.jloop:
	#[rand]<<1 and carry into [shr].
	.tmp0 .tmp0 ?+1
	.tmp0 .rand ?+1
	.tmp0 .z+1  ?+1
	.rand .tmp0 ?+4
	.shr  .z+1  ?+1
	#Next loop.
	.j    .z+1  .jdone
	#[shift]<<1
	.tmp0 .tmp0 ?+1
	.tmp0 .shr  ?+1
	.shr  .tmp0 .jloop
.jdone:
	#Calculate [rand]>>[shift].
	0 ? random.get .tmp0
	.rand .rand ?+1
	.shr  .z-1  ?+1
.shrloop:
	.shr  .z+1  .shrdone
	#[rand]<<1
	.tmp1 .tmp1 ?+1
	.tmp1 .rand ?+1
	.rand .tmp1 ?+1
	#[tmp0]<<1 and carry into [rand].
	.tmp1 .tmp1 ?+1
	.tmp1 .tmp0 ?+1
	.tmp1 .z+1  ?+1
	.tmp0 .tmp1 .shrloop
	.rand .z-1  .shrloop
.shrdone:
	#Get (rand)%[rand]
	.rand .z    .iloop
	0 ? random.mod .rand .rand
	.hash .rand ?+1
	.tmp0 .tmp0 ?+1
	.tmp0 .z+1  ?+1
	.tmp0 .hash ?+1
	.hash .tmp0 ?+7
	.hash .inc0 ?+1
	.tmp0 .tmp0 .iloop
	.hash .inc1 ?+1
	.tmp0 .tmp0 .iloop
.idone:
	#Compare the hased result with the precomputed result.
	0 ? print 99 97 108 99 117 108 97 116 101 100 58 32 0-1 .hash 10 0
	0 ? print 101 120 112 101 99 116 101 100 32 32 58 32 0-1 .expect 10 0
	.hash .expect ?+1
	.hash .z .passed
	0 ? print 102 97 105 108 101 100 10 0
	0-1 0 0
.passed:
	0 ? print 112 97 115 115 101 100 10 10 0
	0 0 .ret:0
#Variables
.i:0
.i0:0-100000
.j:0
.j0:0-6
.tmp0:0
.tmp1:0
.hash:0
.shr:0
.rand:0
.inc0:0x30d1f2bd3a4cc8ae
.inc1:0xa377912103273f8b
.expect:4851650878214109502
0-2 0-1 .z:0 1

random.shuffle.test:
	#Get the return address.
	.ret  .ret  ?+1
	.ret  .z-2  ?+1
	.ret  0     ?+1
	0     0     ?+1
	#Setup our main loop.
	.i    .i0   ?+1
	0 ? print 104 97 115 104 105 110 103 32 0-1 .i 32 115 104 117 102 102 108 101 115 10 0
	0 ? random.seed 0
	.hash .hash .loop+3
.loop:
	.i    .z+1 .done
	#Shuffle the array.
	0 ? random.mod .len .maxlen
	0 ? random.shuffle .arr0 .len
	#Hash the entire array.
	.tmp  .tmp  ?+1
	.p0   .j1   ?+1
	.j    .j0   ?+7
.hashloop:
	.j    .z+1  .loop
	.p0   .z-1  ?+1
	.hash .p0:.arr+65 ?+1
	.tmp  .z+1  ?+1
	.tmp  .hash ?+1
	.hash .tmp  ?+7
	.hash .inc0 ?+1
	.tmp  .tmp  .hashloop
	.hash .inc1 ?+1
	.tmp  .tmp  .hashloop
.done:
	#Compare the hased result with the precomputed result.
	0 ? print 99 97 108 99 117 108 97 116 101 100 58 32 0-1 .hash 10 0
	0 ? print 101 120 112 101 99 116 101 100 32 32 58 32 0-1 .expect 10 0
	.hash .expect ?+1
	.hash .z .passed
	0 ? print 102 97 105 108 101 100 10 0
	0-1 0 0
.passed:
	0 ? print 112 97 115 115 101 100 10 10 0
	0 0 .ret:0
#Variables
.i:0
.i0:0-10000
.j:0
.j0:0-66
.j1:65
.tmp:0
.hash:0
.len:0
.maxlen:65
.inc0:0x30d1f2bd3a4cc8ae
.inc1:0xa377912103273f8b
.expect:17477975225374857137
0-2 0-1 .z:0 1
#The array we're going to shuffle. The first and last elements are canaries and
#shouldn't be shuffled.
.arr:
	0x3c760412306d440e 0x3002a6567e36c717 0x00a976784f7d2e7f 0x3ebc16d04a935eff
	0x510a3a24d0ecb9ca 0xc3c4779048393181 0x72c2726542ae440a 0x2e55d7b5c16c4297
	0xa814c5b005c37109 0x51f0b6cd3ac4839b 0xfb100309b5803a0f 0xfdffb3f3f196229a
	0xc57f52fe2e2cb207 0xc03ec5df1b0c659e 0x104323409d640297 0x7d300742ae9cc67c
	0x80ffb2f4c7876689 0xa670cf314779496d 0x759dfd7e08bf6178 0x753e8ff8284e05b8
	0x625df52130610e61 0x342d91fd26d60f4f 0x9fb35eeb0d4978ba 0xe62bf49393a63a97
	0xa77b7014726cc161 0x76787d25b7a7bc7a 0xac3b6c82c1d922f5 0x22ad1d1a4a3c6dbb
	0xabcc06bfcd498f15 0xcab9b26d3b74ae74 0x7c4b5e06a233d667 0x0bc030351da1aa1c
	0x2fae1cbf8411ed52 0xa56b06e1dd7f3353 0x851067ac93dc173d 0xcdefde80d199e147
	0x8a5e13009d098287 0xbf27d9bc98bde7dc 0x690aa504bbd8b5d3 0x512e3d5242a09e40
	0x1fa9161c855fae91 0x40b0c3043de69e26 0x5701155ea2411de1 0x4a5794639a72fa0f
	0x172b26614fbde7a4 0x0a57972a5f9585d7 0x13ff6b9fc8472173 0xec8581904733cd3d
	0xdd3c452b1b81eb48 0x81f32b1d22f05ac5 0x060c37f06e996722 0x5254415beff37fba
	0x080f8b3fa041c597 0xa140cc22c78572ac 0x78ce6c8d1cb65f6b 0xab0083595f33760a
	0xcfb3bf4331882290 0xa12a9f4febfcd70d 0x524d4ea87b790220 0xd413eca29c4b0785
	0x153d2cce5fb056f9 0x488d2e52a6357687 0x359ce51f9717e45c 0x7a441911961f3189
	0x1d2d47d80b9f5e07 0x5886e2e9d2cade95
.arr0:.arr+1

random.test:
	0 ? random.output.test
	0 ? random.jump.test
	0 ? random.mod.test
	0 ? random.shuffle.test
	0-1 0 0

