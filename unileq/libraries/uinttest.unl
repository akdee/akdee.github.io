#|==============================================================================

Unsigned Integer Testing - v1.03

Author: Alec Dee - alecdee.github.io - akdee144@gmail.com

--------------------------------------------------------------------------------
About

To compile the necessary files together, run
cat uinttest.unl uint.unl print.unl random.unl > test.unl;./unileq test.unl

Average instructions per function:
cmp: 28
set: 24
neg: 25
add: 30
sub: 31
mul: 878
div: 911
shl: 83
shr: 131
not: 26
and: 469
 or: 470
xor: 471

|#

0 0 test.main

test.main:
	#Starting integer tests.
	0 ? print 115 116 97 114 116 105 110 103 32 105 110 116 101 103 101 114 32 116 101 115 116 115 10 0

.loop:
	#While trial<trials.
	.tmp0 .tmp0 ?+1
	.tmp0 .trials ?+1
	.tmp1 .tmp1 ?+1
	.tmp1 .tmp0 ?+1
	.tmp1 .trial .done

	#---------------------- Parameters ----------------------
	#Generate A, B, and C parameters.
	0 ? test.rand.uint .a
	0 ? test.rand.uint .b
	0 ? random.mod     .c .shiftmax
	.c .shiftsub ?+1

	#Randomly set A=B.
	0 ? random.mod     .tmp0 .eqprob
	.tmp0 .z    ?+4
	.tmp0 .tmp0 .nosetab
	.tmp0 .b    ?+1
	.a    .a    ?+1
	.a    .tmp0 ?+1
	.nosetab:

	#Copy A, B, and C to compare later.
	.tmp0 .tmp0 ?+1
	.tmp0 .a    ?+1
	.a0   .a0   ?+1
	.a0   .tmp0 ?+1
	.tmp0 .tmp0 ?+1
	.tmp0 .b    ?+1
	.b0   .b0   ?+1
	.b0   .tmp0 ?+1
	.tmp0 .tmp0 ?+1
	.tmp0 .c    ?+1
	.c0   .c0   ?+1
	.c0   .tmp0 ?+1

	#0 ? print 0-1 .trial 32 0-1 .a 32 0-1 .b 32 0-1 .c 10 0

	#----------------------- Compare ------------------------
	#Compare A and B manually.
	.exp0 .exp0 ?+1
	.exp0 .z-1  ?+1
	.b    .a    ?+4
	.exp0 .z+1  ?+7
	.b    .z    ?+4
	.exp0 .z-1  ?+1
	.tmp0 .tmp0 ?+1
	.tmp0 .a    ?+1
	.b    .tmp0 ?+1

	.ret0 .ret0 ?+1
	0 ? test.measure .cmpops .cmplt 0 ? uint.cmp .a .b .cmplt .cmpeq .cmpgt
	0-1 0 0
	.cmpgt: .ret0   .z-1  ?+1
	.cmpeq: .ret0   .z-1  ?+1
	.cmplt: .cmpops .ret0 ?+1
	0 ? test.cmp .exp0 .ret0 0

	#------------------------- Set --------------------------
	0 ? test.measure .setops ?+6 0 ? uint.set .ret0 .a
	0 ? test.cmp .a .ret0 1

	#----------------------- Negation -----------------------
	#Calculate -A manually.
	.exp0 .exp0 ?+1
	.exp0 .a    ?+1

	0 ? test.measure .negops ?+6 0 ? uint.neg .ret0 .a
	0 ? test.cmp .exp0 .ret0 2

	#----------------------- Addition -----------------------
	#Calculate A+B manually.
	.tmp0 .tmp0 ?+1
	.tmp0 .a    ?+1
	.tmp0 .b    ?+1
	.exp0 .exp0 ?+1
	.exp0 .tmp0 ?+1

	0 ? test.measure .addops ?+7 0 ? uint.add .ret0 .a .b
	0 ? test.cmp .exp0 .ret0 3

	#--------------------- Subtraction ----------------------
	#Calculate A-B manually.
	.exp0 .b    ?+1
	.exp0 .b    ?+1

	0 ? test.measure .subops ?+7 0 ? uint.sub .ret0 .a .b
	0 ? test.cmp .exp0 .ret0 4

	#-------------------- Multiplication --------------------
	#Calculate A*B manually.
	.exp0 .exp0 ?+1
	#[tmp1]=[a]
	.tmp0 .tmp0 ?+1
	.tmp0 .a    ?+1
	.tmp1 .tmp1 ?+1
	.tmp1 .tmp0 ?+1
	#[tmp2]=65
	.tmp2 .tmp2 ?+1
	.tmp2 .nbits-1 ?+1
	.mulloop:
	.tmp2 .z+1  .muldone
	#exp<<=1
	.tmp0 .tmp0 ?+1
	.tmp0 .exp1 ?+1
	.exp1 .tmp0 ?+1
	.tmp0 .tmp0 ?+1
	.tmp0 .exp0 ?+1
	.tmp0 .z+1  ?+1
	.exp0 .tmp0 ?+4
	#If [exp0] carries.
	.exp1 .z-1  ?+1
	.exp0 .z+1  ?+1
	#[tmp1]<<=1
	.tmp0 .tmp0 ?+1
	.tmp0 .tmp1 ?+1
	.tmp0 .z+1  ?+1
	.tmp1 .tmp0 .mulloop
	#[exp0]+=[b]
	.tmp0 .tmp0 ?+1
	.tmp0 .b    ?+1
	.tmp0 .z+1  ?+1
	.exp0 .tmp0 ?+4
	.exp1 .z-1  ?+1
	.exp0 .z+1  ?+1
	.tmp0 .tmp0 .mulloop
	.muldone:

	0 ? test.measure .mulops ?+8 0 ? uint.mul .ret1 .ret0 .a .b
	0 ? test.cmp .exp0 .ret0 5
	0 ? test.cmp .exp1 .ret1 6

	#----------------------- Division -----------------------
	#For B!=0, q=A/B, and r=A%B, we have A=q*B+r and r<B.
	.b .z .div0
	.divden .z-1 ?+1
	0 ? test.measure .divops ?+8 0 ? uint.div .ret0 .ret1 .a .b
	0 ? uint.cmp .ret1 .b .remlt ?+2 ?+1
	0 ? test.cmp .z .b 7
	.remlt:
	0 ? uint.mul .tmp0 .tmp1 .ret0 .b
	0 ? test.cmp .z .tmp0 8
	0 ? uint.add .tmp1 .ret1 .tmp1
	0 ? test.cmp .a .tmp1 9
	.div0:

	#---------------------- Shift Left ----------------------
	#Calculate A<<C manually.
	#[exp0]=[a]
	.tmp0 .tmp0 ?+1
	.tmp0 .a    ?+1
	.exp0 .exp0 ?+1
	.exp0 .tmp0 ?+1
	#[tmp2]=-[c]
	.tmp2 .tmp2 ?+1
	.tmp2 .c    ?+1
	.shlloop:
	.exp0 .z    .shldone
	.tmp2 .z    .shldone
	.tmp0 .tmp0 ?+1
	.tmp0 .exp0 ?+1
	.exp0 .tmp0 ?+1
	.tmp2 .z-1  .shlloop
	.shldone:

	0 ? test.measure .shlops ?+7 0 ? uint.shl .ret0 .a .c
	0 ? test.cmp .exp0 .ret0 10

	#--------------------- Shift Right ----------------------
	#Calculate A>>C manually.
	.exp0 .exp0 ?+1
	#[tmp1]=[a]
	.tmp0 .tmp0 ?+1
	.tmp0 .a    ?+1
	.tmp1 .tmp1 ?+1
	.tmp1 .tmp0 ?+1
	#[tmp2]=-[c]-1
	.tmp2 .tmp2 ?+1
	.tmp2 .c    ?+1
	.tmp2 .z+1  ?+1
	.shrloop:
	.tmp2 .nbits-1 .shrdone
	.tmp2 .bits+2 ?+1
	#[exp0]<<=1
	.tmp0 .tmp0 ?+1
	.tmp0 .exp0 ?+1
	.exp0 .tmp0 ?+1
	#[tmp1]<<=1
	.tmp0 .tmp0 ?+1
	.tmp0 .tmp1 ?+1
	.tmp0 .z+1  ?+1
	.tmp1 .tmp0 .shrloop
	.exp0 .z-1  .shrloop
	.shrdone:

	0 ? test.measure .shrops ?+7 0 ? uint.shr .ret0 .a .c
	0 ? test.cmp .exp0 .ret0 11

	#------------------------- Not --------------------------
	#~A=-1-A
	.exp0 .exp0 ?+1
	.exp0 .z+1  ?+1
	.exp0 .a    ?+1

	0 ? test.measure .notops ?+6 0 ? uint.not .ret0 .a
	0 ? test.cmp .exp0 .ret0 12

	#------------------------- And --------------------------
	#Calculate A&B manually.
	#[exp0]=[a]
	.tmp0 .tmp0 ?+1
	.tmp0 .a    ?+1
	.exp0 .exp0 ?+1
	.exp0 .tmp0 ?+1
	#[exp1]=[b]
	.tmp0 .tmp0 ?+1
	.tmp0 .b    ?+1
	.exp1 .exp1 ?+1
	.exp1 .tmp0 ?+1
	#[tmp2]=65
	.tmp2 .tmp2 ?+1
	.tmp2 .nbits-1 ?+1
	.andloop:
	.tmp2 .z+1  .anddone
	#[exp0]<<=1
	.tmp0 .tmp0 ?+1
	.tmp0 .exp0 ?+1
	.exp0 .tmp0 ?+1
	#[exp1]<<=1
	.tmp1 .tmp1 ?+1
	.tmp1 .exp1 ?+1
	.tmp1 .z+1  ?+1
	#Set [exp0] if both carry.
	.exp1 .tmp1 .andloop
	.tmp0 .z    .andloop
	.tmp0 .hbit ?+4
	.tmp0 .tmp0 .andloop
	.exp0 .z-1  .andloop
	.anddone:

	0 ? test.measure .andops ?+7 0 ? uint.and .ret0 .a .b
	0 ? test.cmp .exp0 .ret0 13

	#-------------------------- Or --------------------------
	#A|B=A+B-(A&B)
	.ret0 .a    ?+1
	.ret0 .b    ?+1
	.exp1 .exp1 ?+1
	.exp1 .ret0 ?+1

	0 ? test.measure .orops ?+7 0 ? uint.or .ret0 .a .b
	0 ? test.cmp .exp1 .ret0 14

	#------------------------- Xor --------------------------
	#A^B=(A|B)-(A&B)
	.exp1 .exp0 ?+1

	0 ? test.measure .xorops ?+7 0 ? uint.xor .ret0 .a .b
	0 ? test.cmp .exp1 .ret0 15

	#Make sure parameters haven't been modified.
	0 ? test.cmp .a0 .a 16
	0 ? test.cmp .b0 .b 17
	0 ? test.cmp .c0 .c 18

	.trial .z-1 .loop

.done:
	#Print instruction counts.
	0 ? uint.div .cmpops 0 .cmpops .trial
	0 ? uint.div .setops 0 .setops .trial
	0 ? uint.div .negops 0 .negops .trial
	0 ? uint.div .addops 0 .addops .trial
	0 ? uint.div .subops 0 .subops .trial
	0 ? uint.div .mulops 0 .mulops .trial
	0 ? uint.div .divops 0 .divops .divden
	0 ? uint.div .shlops 0 .shlops .trial
	0 ? uint.div .shrops 0 .shrops .trial
	0 ? uint.div .notops 0 .notops .trial
	0 ? uint.div .andops 0 .andops .trial
	0 ? uint.div  .orops 0  .orops .trial
	0 ? uint.div .xorops 0 .xorops .trial
	0 ? print 97 118 101 114 97 103 101 32 105 110 115 116 114 117 99 116 105 111
	          110 115 32 112 101 114 32 102 117 110 99 116 105 111 110 10 0
	0 ? print  99 109 112 58 32 0-1 .cmpops 10 0
	0 ? print 115 101 116 58 32 0-1 .setops 10 0
	0 ? print 110 101 103 58 32 0-1 .negops 10 0
	0 ? print  97 100 100 58 32 0-1 .addops 10 0
	0 ? print 115 117  98 58 32 0-1 .subops 10 0
	0 ? print 109 117 108 58 32 0-1 .mulops 10 0
	0 ? print 100 105 118 58 32 0-1 .divops 10 0
	0 ? print 115 104 108 58 32 0-1 .shlops 10 0
	0 ? print 115 104 114 58 32 0-1 .shrops 10 0
	0 ? print 110 111 116 58 32 0-1 .notops 10 0
	0 ? print  97 110 100 58 32 0-1 .andops 10 0
	0 ? print  32 111 114 58 32 0-1  .orops 10 0
	0 ? print 120 111 114 58 32 0-1 .xorops 10 0
	0 ? print 112 97 115 115 101 100 10 0
	0-1 0 0
0-1 .z:0 1
.a:0
.b:0
.c:0
.eqprob:64
.shiftmax:181
.shiftsub:66
.cmpops:0
.setops:0
.negops:0
.addops:0
.subops:0
.mulops:0
.divops:0
.divden:0
.shlops:0
.shrops:0
.notops:0
.andops:0
.orops:0
.xorops:0
.trial:0
.trials:2048
.exp0:0
.exp1:0
.ret0:0
.ret1:0
.tmp0:0
.tmp1:0
.tmp2:0
#Place these far away from .a, .b, and .c in order to minimize accidental use
#by functions.
.a0:0
.b0:0
.c0:0
.hbit:0x8000000000000000
0-65 .nbits:0-64
.bits:64 65 66

test.rand.uint:
	#Call  : 0 ? test.rand ret
	#Effect: [ret]=(rand)
	#Generate a random integer such that the probability of any bitcount is uniform.
	#Setup new stack.
	.tmp0 .tmp0 ?+1
	.tmp0 .p0   ?+1
	0     .z+2  ?+1
	0     .tmp0 ?+1
	.p0   0     ?+1
	.addr 0     ?+1
	0     0     ?+1
	#Get [ret]
	.tmp0 .tmp0 ?+1
	.tmp0 .p0:0 ?+1
	.p5   .p5   ?+1
	.p5   .tmp0 ?+1
	.p6   .p6   ?+1
	.p6   .tmp0 ?+1
	#Shuffle arr.
	0 ? random.shuffle .arr0 .arrlen
	#Calculate how many bits we want to set.
	.i    .n64  ?+1
	0 ? random.mod .i .i
	.tmp0 .tmp0 ?+1
	.b0   .b0   ?+1
	.b0   .narr ?+1
	.i    .z-1  ?+1
.setbits:
	.i    .z+1  .setdone
	.tmp0 .b0:0 ?+1
	.b0   .z-1  .setbits
.setdone:
	#Return
	.tmp1 .tmp1 ?+1
	.tmp1 .p5:0 ?+1
	.tmp0 .tmp1 ?+1
	.p6:0 .tmp0 ?+1  #[ret]=[rand]
	0     0     .addr:1
#Variables
0-1 .z:0 1 2
.n64:0-64
.tmp0:0
.tmp1:0
.i:0
.arr:
	0x1 0x2 0x4 0x8 0x10 0x20 0x40 0x80 0x100 0x200 0x400 0x800 0x1000 0x2000 0x4000
	0x8000 0x10000 0x20000 0x40000 0x80000 0x100000 0x200000 0x400000 0x800000
	0x1000000 0x2000000 0x4000000 0x8000000 0x10000000 0x20000000 0x40000000
	0x80000000 0x100000000 0x200000000 0x400000000 0x800000000 0x1000000000
	0x2000000000 0x4000000000 0x8000000000 0x10000000000 0x20000000000 0x40000000000
	0x80000000000 0x100000000000 0x200000000000 0x400000000000 0x800000000000
	0x1000000000000 0x2000000000000 0x4000000000000 0x8000000000000 0x10000000000000
	0x20000000000000 0x40000000000000 0x80000000000000 0x100000000000000
	0x200000000000000 0x400000000000000 0x800000000000000 0x1000000000000000
	0x2000000000000000 0x4000000000000000 0x8000000000000000
.arrlen:?-.arr
.arr0:.arr
.narr:0-.arr

test.cmp:
	#Call  : 0 ? test.cmp exp val id
	#Setup stack.
	.tmp  .tmp  ?+1
	.tmp  .p0   ?+1
	0     .tmp  ?+1
	0     .z+2  ?+1
	.p0   0     ?+1
	.p2   0     ?+1
	.id   0     ?+1
	.ret  0     ?+1
	0     0     ?+1
	#Get [exp]
	.tmp  .tmp  ?+1
	.tmp  .p0:0 ?+1
	.p1   .p1   ?+1
	.p1   .tmp  ?+1
	.tmp  .tmp  ?+1
	.tmp  .p1:0 ?+1
	.exp  .tmp  ?+1
	#Get [val]
	.tmp  .tmp  ?+1
	.tmp  .p2:1 ?+1
	.p3   .p3   ?+1
	.p3   .tmp  ?+1
	.tmp  .tmp  ?+1
	.tmp  .p3:0 ?+1
	.val  .val  ?+1
	.val  .tmp  ?+1
	#Compare [exp] and [val].
	.exp  .val  ?+1
	.exp  .z    .ret:3
	.exp  .tmp  ?+1
	#ERROR
	0 ? print 69 82 82 79 82 10 0
	#line
	0 ? print 116 114 105 97 108 32 58 32 0-1 test.main.trial 10 0
	#test
	0 ? print 116 101 115 116 32 32 58 32 0-1 .id:2 10 0
	#expect
	0 ? print 101 120 112 101 99 116 58 32 0-1 .exp 10 0
	#return
	0 ? print 114 101 116 117 114 110 58 32 0-1 .val 10 0
	0-1 0 0
.exp:0
.val:0
.z:0 1 2
.tmp:0

test.measure:
	#0 ? test.measure counter return 0 ? func arg0 arg1 ...
	#counter = the address for counting instructions.
	#return  = address the function will return to when finished.
	#Emulates the execution of a function and measures how many instructions it uses.
	#Uses 24+24*n instructions for n emulated instructions.
	.tmp  .a0   ?+1
	.nret .tmp  ?+1
	.tmp  0     ?+1
	.dif  .tmp  ?+1
	.dif  .z+4  ?+1
	#Setup counter.
	0     .z+2  ?+1
	.p0   .p0   ?+1
	.p0   0     ?+1
	.tmp  .tmp  ?+1
	.tmp  .p0:0 ?+1
	.cnt  .cnt  ?+1
	.cnt  .tmp  ?+1
	#Get the negative return address. If [nret]+[dif0]+[dif1]+...=0, then return.
	0     .z+1  ?+1
	.p1   .p1   ?+1
	.p1   0     ?+1
	.nret .p1:0 ?+1
	#Reset stack address.
	0     0     ?+1
.loop:
	#Update a, b, and c addresses.
	.a0   .dif  ?+1
	.b0   .dif  ?+1
	.c0   .dif  ?+1
	.nret .dif  ?+1
	.dif  .dif  ?+1
	#Return if ip=[ret].
	.nret .z    .ret
	#Load [a]. a0 will hold the return address when we're done.
	.tmp  .tmp  ?+2
	.ret: .tmp
	.tmp  .a0:0 ?+1
	.a    .a    ?+1
	.a    .tmp  ?+1
	#Load [b].
	.tmp  .tmp  ?+1
	.tmp  .b0:1 ?+1
	.b    .b    ?+1
	.b    .tmp  ?+1
	#Set [dif]=-[c].
	.dif  .c0:2 ?+1
	.c    .c    ?+1
	#If a=-1, set c=[c0]. Otherwise, set c=jmp.
	.a    .z-2  ?+4
	.c    .dif  ?+4
	.c    .njmp ?+1
	.a    .z+2  ?+1
	#Execute instruction.
	.a:0  .b:0  .c:0
	#We failed to jump, set [dif]=-3.
	.dif  .dif  ?+1
	.dif  .z+3  .cnt
.jmp:
	#We jumped, set [dif]=[a0]-[c].
	.tmp  .tmp  ?+1
	.tmp  .a0   ?+1
	.dif  .tmp  ?+1
.cnt:
	#Increment the instruction counter.
	0     .z-1  .loop
.tmp:0
.nret:0
.dif:0
.njmp:0-.jmp
0-2 0-1 .z:0 1 2 3 4

