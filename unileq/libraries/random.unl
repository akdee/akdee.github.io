#|==============================================================================

Random Number Generator - v1.00

Author: Alec Dee - alecdee.github.io - akdee144@gmail.com

--------------------------------------------------------------------------------
Index

random.seed    [num]
random.jump    [num]
random.get     [dst]
random.mod     [dst] [mod]
random.shuffle [[arr]] [len]

|#

random.table:
	#For the hash output to be unique, the bottom 8 bits of the table elements
	#need be unique. Add 255 to compensate for shifting in random.generate.
	0x98f570cabbbe29df 0x911fe27512457252 0xc4b49b92decb8837 0x2cd974e264a1479d
	0xf25c1cd4ec741a12 0x6ac38c14e315fff1 0x532a643077bdeb72 0xe73da4ddf4ea224d
	0xf482feb36863dbab 0xb0b08786cdd32c7e 0x2912bb1579871354 0xaa3c40a234195939
	0xa56c2aec8d398d1e 0xb571c4090f4e3234 0xcfbbfe93f033310f 0x4d08908eb0d377be
	0x902c693a21a6324a 0x9b35783a62da3880 0xeb23e76d74a0313c 0x148e78184600d984
	0x93cdff03f57a916f 0xdc500bc795c0dbca 0x70da57814f763340 0x036633f4013f2601
	0x0c8b76d2def53041 0xa45d1da2dba14aa4 0x28dbc12379f88e7f 0xcf437f8d91ddbd05
	0x0e04a0cdced8592a 0xc7ad971bd5fd8bbf 0x29c4517860f094f0 0x651bab92d762f18b
	0x9e5f7051205bcca5 0xdcf588711bbcf1eb 0xb511a1dded21dda8 0x3679f6456f345375
	0xe38dc026335be0ea 0xc11d3c759a573e28 0x69410c19157a93d9 0xbcc29a4c1b48f1b4
	0x178c1f951bb7698c 0xd0fc4d498b3e974e 0xb5b221282132f99e 0x3406dfcb2f036745
	0xa18219fffb9a2a7b 0xf389feeac4bde71b 0x7b0c200137dd9fd6 0x2ecc7eb7f4962610
	0x92ac81ab67b51c6a 0x9009eb7acc6a5cfc 0x3182a4ab17f0d893 0xde30902e8d3381b6
	0x3f3b76e6cccfc6c1 0xb90d0547d16661b2 0x8829b84121f35e26 0xaf509317565b1a66
	0x8fa5742b4f4eef2b 0xbfb86e765ab97fb1 0x42b8d16ac3cc3afe 0x33b8fda60fa071ff
	0x68b9f22c1b7ba7cc 0x0cee1ee11bc6d4c8 0x0dce2401a63994a0 0x052188c95763b05a
	0x4cd0743f962712c3 0x8ab6545393a1ec78 0x768742f4f5d2cb32 0x2505089bf7de1e6e
	0xc77ddf5d4bcb5067 0x3b861ae62a54918e 0xbba48529fa285a20 0x9364a79693182ee8
	0x29da3184545bf86c 0xae8efc34c79dd94f 0xefb805aef57babb3 0xf78943322ead07e3
	0x9c357259e48eb72e 0x1dcf0b5f98e2b313 0xa84cb6e4e78975d0 0x9054b2308f7ff627
	0xdea01eccc8cb3081 0x46be28419fcd8ff2 0x5c466247cab9cef9 0x1034bef3c280cb91
	0x8595486352ef7b86 0xe9c864d995472195 0x9d17d691fa40ba57 0x1b0a781d7f42e63f
	0x9260768bc3848517 0x32b48273b8447bed 0xa630dd7aa9926fe7 0x6a5f0a3586db5364
	0xbeda047a0761aa5d 0xeeedd85395df43a9 0x9fa214fd94616536 0xd76c7fadfb1b9fa6
	0xe2679809cd7c7214 0x4dbb967cba0998f6 0x9e611d7eb7c16590 0xde11e3858421c55c
	0x8f60a79abb8d5823 0xb69e8632011f04f5 0x3a1b15a9d57b3b5b 0x6ec8bf7ca6e95373
	0x18ab73ed10808b04 0xccf19063a89d6f55 0x9ddaae641e0d379c 0x349a6b56eb499e22
	0xdebee3f7288eac68 0x6d75b7185e043515 0xbfe68ee59f24e088 0xe2f755c64a1847a7
	0xe3956041e0330685 0x1684ec84b22cf225 0xe547786c47fe8860 0x7aaf255ec884c18a
	0xb9a7b0be91eca579 0x18a85229e8fbe396 0x9b6dad19e7415c43 0xdab2c6a930db62a3
	0xd745efee27085616 0x76f406eb0c742953 0x3f779c073097ab58 0xbd0f440b38d1bbe5
	0x6ebf3706f695fcd4 0x5fbeb72a136c6008 0xd1c85045aafa5718 0x9b0cf77eb69cfeda
	0x96bc972c67aef061 0xb878518614240f7a 0x915a36484cec1bdc 0xa020e164db74d598
	0x875a2ac9e4b986d7 0xe34b6b0a580b7dcf 0xcd30c71286948cba 0xf0e6820ef3e9df5e
	0x5dd7e2048d695be6 0xc631ad2b02403063 0xc04e99806aa6b92f 0x5c3304efe89720b9
	0x8470f7bb68304afd 0x4667d0d2c455aa0e 0x627165e1b5e169c0 0xcd115b2a371d72d2
	0x9d6959acac517971 0x2722e04d0a4a14bd 0x9da126422bd82d35 0xef7d31df6da70c1a
	0x8419df95b52ed597 0x8744bd266232ef48 0xfec4fb7d4a39b833 0x653e09ad754e96e2
	0x2608342e20aa3b9a 0xcaacecdf21d87e02 0x60760dd379bb4769 0xb3f7371bd3167c6d
	0x83456546a5d4b147 0x3b873a2c613d0751 0x12c3d73474334e6b 0xbec28771231d6dce
	0x1e0915b280ca6df7 0x12f9adbc60d75977 0x9fb08c027989ef5f 0xbe06995c7b3a3b0c
	0xa018541f0b2d757d 0xcb0dd0f03d00ed9f 0xcea6dda89606952d 0x903aaea97447f3e0
	0xa790fbe394d3a270 0x40efcea66b9f4706 0xce2e008277041942 0x648d7efc4101d346
	0x77554a83e487e08d 0x88a954411c963f49 0x5e50a70702f25eef 0x0f71bbe7c9f8890d
	0xe10b0dd69b525bb8 0xb6e07229267549c5 0xf170a88f296f53de 0x3c04bceebe4479dd
	0x68bba5422fffc5c9 0x3532437701d42ddb 0x0f193926db9f9f82 0xe3e8936f5cc07bf4
	0xeb05b184ecbc0800 0xcfb13169fb869a83 0x42a0202293da97e9 0xf2b6c837dd71ecd1
	0x384cbe585d4a28cb 0xaa3111a39a9af07c 0x6c8ab832cf8817c2 0x0483dd6ad0cc5559
	0x720a2dd6094fc8a2 0x03107a9e6697713b 0x1668b4ba38718f56 0x771106507afb5807
	0x5054ac481b535387 0x7e485aae5cf084bb 0x881766ced977c09b 0x2eb2c7255ded9265
	0xeeb1ca030d19f0cd 0x68138ac1b21f70af 0xe5de8ba1badd7444 0x03a8f78e3114d6b5
	0xde62bdde8d4259ec 0xcb15fc108b83a2a1 0x47e32cf9f7cb10b7 0xdd46c0bcb1b2ee0a
	0x24966b07ce5abbf3 0x107257fa9545c650 0xbb6bed3a3715a211 0xca941e35cb1a8b38
	0x3ea5389dbca69eac 0x0b84722da650e3fb 0x0ddd81bdedcd062c 0xa55ee070874ab73d
	0x4856d854cdc81094 0xaf3482758939f0ae 0x80547b7b42c608aa 0x32a83053658a7429
	0xb4e0f4a4bd383d1d 0x86c52d7ce1b79e89 0x1567a7aa94e4fd30 0x71fc8c1a6dfa44ad
	0x381ae7272b68bbc7 0x85632a5c9280d776 0x141c9e3bdecc4374 0xae184e25976dae99
	0x6fd0f132108431fa 0xb95e50ee69ed601c 0x786f68e44c0f0f21 0x88ac24917ce6333a
	0x88fca4535359163e 0x6c6e38b0bf5b9819 0x4b42cfc646897d4c 0x2a18e1dbbded9c31
	0x8c75ad2c944620c4 0xde14e4d24fc9bbe1 0x88d304a2898a4603 0xf7e1e0b52d45f14b
	0x9d8a8dd7d1bafc1f 0x5ba48bfee8d174f8 0x5d2d0cfc9a48fad5 0x85e41916f3616cee
	0xedfc0c68c02171c6 0x067e32a00b2106e4 0x04440fe6a9b7adbc 0xe0942f02c01f840b
	0x86c8c765b04b70b0 0x03edd68c2c9f62d8 0xa82b24db8deaf48f 0x66337c5333e8c524
	0x305d36e368598b92 0xbdd8330fbb889f62 0xc146c702c618a109 0x377d5bd4c5c6b8d3

random.generate:
	#Call  : 0 ? random.generate
	#Effect: Meant for internal use. Advances the PRNG state, hashes it, and stores
	#the result in random.generate.ret. Uses a maximum of 352 instructions.
	#Set return address.
	.a2  .a2  ?+1
	.a2  0    ?+1
	.a2  .l+6 ?+1
	#Advance state.
	.state .inc ?+1
	#Prepare return value.
	.ret .ret ?+1
	.ret .state ?+1
	.z .l+4 ?+4
.loop:
	.z .z+1 .done
	#Set [out]=[out]*256+255 and [t0]=table+([out]>>56).
	.tmp .tmp ?+1 .tmp .ret ?+1 .tmp .z+1 ?+1 .ret .tmp ?+4 .t0 .l+0 ?+4
	.t0  .l+8 ?+1
	.tmp .tmp ?+1 .tmp .ret ?+1 .tmp .z+1 ?+1 .ret .tmp ?+4 .t0 .l+1 ?+1
	.tmp .tmp ?+1 .tmp .ret ?+1 .tmp .z+1 ?+1 .ret .tmp ?+4 .t0 .l+2 ?+1
	.tmp .tmp ?+1 .tmp .ret ?+1 .tmp .z+1 ?+1 .ret .tmp ?+4 .t0 .l+3 ?+1
	.tmp .tmp ?+1 .tmp .ret ?+1 .tmp .z+1 ?+1 .ret .tmp ?+4 .t0 .l+4 ?+1
	.tmp .tmp ?+1 .tmp .ret ?+1 .tmp .z+1 ?+1 .ret .tmp ?+4 .t0 .l+5 ?+1
	.tmp .tmp ?+1 .tmp .ret ?+1 .tmp .z+1 ?+1 .ret .tmp ?+4 .t0 .l+6 ?+1
	.tmp .tmp ?+1 .tmp .ret ?+1 .tmp .z+1 ?+1 .ret .tmp ?+4 .t0 .l+7 ?+1
	#[out]-=table+255
	.ret .t0:0 ?+1
	.t0 .t0 .loop
.done:
	0 0 .a2:0
#Variables
.state:0x4a090815efe7b279
.inc:0x1b859b859f5851fd
.ret:0
.tmp:0
.l:0-128-random.table 0-64 0-32 0-16 0-8 0-4 0-2 0-1 0-random.table
.z:0 1

random.seed:
	#Call  : 0 ? random.seed num
	#Effect: Sets the PRNG state based on the value of [num].
	#Setup the stack.
	.tmp  .tmp  ?+1
	.tmp  .a2   ?+1
	.tmp  .z-2  ?+1
	0     .tmp  ?+1
	.a2   0     ?+1
	.a3   0     ?+1
	0     0     ?+1
	#Get [num].
	.tmp  .tmp  ?+1
	.tmp  .a2:2 ?+1
	.p0   .p0   ?+1
	.p0   .tmp  ?+1
	.tmp  .tmp  ?+1
	.tmp  .p0:0 ?+1
	#Reset the generator state.
	random.generate.state random.generate.state ?+1
	random.generate.inc   random.generate.inc   ?+1
	#Set [inc] make sure it's odd.
	random.generate.inc .tmp ?+1
	0 ? random.generate
	random.generate.inc random.generate.inc ?+1
	random.generate.inc random.generate.ret ?+1
	random.generate.inc random.generate.ret ?+1
	random.generate.inc .z-1 ?+1
	#Set [state].
	random.generate.state .tmp ?+1
	0 ? random.generate
	random.generate.state random.generate.state ?+1
	random.generate.state random.generate.ret   .a3:3
#Variables
.tmp:0
0-2 0-1 .z:0

random.jump:
	#Call  : 0 ? random.jump num
	#Effect: Jumps the PRNG state forward or backwards [num] number of steps.
	#Setup the stack.
	.tmp  .tmp  ?+1
	.tmp  .a2   ?+1
	.tmp  .z-2  ?+1
	0     .tmp  ?+1
	.a2   0     ?+1
	.a3   0     ?+1
	#Get [num].
	.tmp  .tmp  ?+1
	.tmp  .a2:2 ?+1
	.p0   .p0   ?+1
	.p0   .tmp  ?+1
	.num  .num  ?+1
	.num  .p0:0 ?+1
	#Calculate [inc]*[num].
	.mul  .mul  ?+1
	.tmp  .tmp  ?+1
	.i    .i0   ?+1
.loop:
	#[num]<<1 and carry into [mul].
	.tmp  .z+1  ?+1
	.tmp  .num  ?+1
	.num  .tmp  ?+4
	.mul  random.generate.inc ?+1
	.tmp  .tmp  ?+1
	.i    .z+1  .done
	#[mul]<<1
	.tmp  .mul  ?+1
	.mul  .tmp  ?+1
	.tmp  .tmp  .loop
.done:
	#[state]+=[inc]*[num]
	.tmp  .mul  ?+1
	random.generate.state .tmp ?+1
	#Return
	0     0     .a3:3
#Variables
.tmp:0
.num:0
.mul:0
.i:0
.i0:0-64
0-2 0-1 .z:0 1

random.get:
	#Call  : 0 ? random.get dst
	#Effect: [dst]=a random 64 bit integer
	#Setup the stack.
	0     .z+2  ?+1
	.a2   .a2   ?+1
	.a2   0     ?+1
	0     .z+1  ?+1
	.a3   .a3   ?+1
	.a3   0     ?+1
	0     0     ?+1
	#Get dst.
	.p0   .a2:2 ?+1
	.p1   .p0   ?+1
	.p2   .p0   ?+1
	.z    .p1   ?+1
	.p0   .p0   ?+1
	.p0   .z    ?+1
	.z    .z    ?+1
	#Get a random number.
	0 ? random.generate
	.z random.generate.ret ?+1
	#Set [dst] and return.
	.p0:0 .p1:0 ?+1
	.p2:0 .z    ?+1
	.z    .z    ?+1
	0     0     .a3:3
#Variables
.z:0 1 2

random.mod:
	#Call  : 0 ? random.get dst mod
	#Effect: [dst]=a random number in [0,[mod]).
	#Setup the stack.
	.tmp0 .tmp0 ?+1
	.tmp0 .a2   ?+1
	0     .tmp0 ?+1
	0     .z+2  ?+1
	.a2   0     ?+1
	.a3   0     ?+1
	.a4   0     ?+1
	0     0     ?+1
	#Get dst.
	.tmp0 .tmp0 ?+1
	.tmp0 .a2:2 ?+1
	.p0   .p0   ?+1
	.p0   .tmp0 ?+1
	.p1   .p1   ?+1
	.p1   .tmp0 ?+1
	#Get [mod].
	.tmp0 .tmp0 ?+1
	.tmp0 .a3:3 ?+1
	.p2   .p2   ?+1
	.p2   .tmp0 ?+1
	.nmod .nmod ?+1
	.nmod .p2:0 ?+1
	.nmod .z    .div0
	.nmod .z-1  ?+1
	.mod  .mod  ?+1
	.mod  .nmod ?+1
.randloop:
	#Get a new random number.
	0 ? random.generate
	.rand .rand ?+1
	.rand random.generate.ret ?+1
	.tmp0 .tmp0 ?+1
	.tmp0 random.generate.ret ?+1
	.rem  .rem  ?+1
	.i    .i0   ?+1
	#Caculate [rem]=[rand]%[mod].
.modloop:
	#[tmp0]<<1 and carry into [rem].
	.tmp1 .tmp1 ?+1
	.tmp1 .tmp0 ?+1
	.tmp1 .z+1  ?+1
	.tmp0 .tmp1 ?+4
	.rem  .z-1  ?+1
	#[rem]%[mod]
	.rem  .mod  ?+7
	.rem  .z+1  ?+1
	.tmp1 .tmp1 ?+7
	.rem  .nmod ?+1
	.tmp1 .tmp1 ?+1
	.i    .z+1  .moddone
	#[rem]<<1
	.tmp1 .rem  ?+1
	.rem  .tmp1 .modloop
.moddone:
	#Rejection sampling. Accept if rand-rem<=-mod.
	.nmod .z+1  ?+1
	.rand .rem  ?+1
	.rand .nmod .accept
	.nmod .z-1  .randloop
.accept:
	.rem  .p0:0 ?+1
	.tmp1 .rem  ?+1
	.p1:0 .tmp1 ?+1
	0     0     .a4:4
.div0:
	0-1 0 0
#Variables
.nmod:0
.mod:0
.rand:0
.rem:0
.tmp0:0
.tmp1:0
.i:0
.i0:0-64
0-1 .z:0 1 2

random.shuffle:
	#Call  : 0 ? random.shuffle arr len
	#Effect: Randomly shuffles [[arr]] from [0,[len]).
	#Setup the stack.
	.tmp0 .tmp0 ?+1
	.tmp0 .a2   ?+1
	0     .tmp0 ?+1
	0     .z+2  ?+1
	.a2   0     ?+1
	.a3   0     ?+1
	.a4   0     ?+1
	0     0     ?+1
	#Get [len].
	.tmp0 .tmp0 ?+1
	.tmp0 .a3:3 ?+1
	.p1   .p1   ?+1
	.p1   .tmp0 ?+1
	.tmp0 .tmp0 ?+1
	.tmp0 .p1:0 ?+1
	.len  .len  ?+1
	.len  .tmp0 ?+1
	#Return if [len]<=1.
	.len  .z+1  .done
	#Get -[arr].
	.tmp0 .tmp0 ?+1
	.tmp0 .a2:2 ?+1
	.p0   .p0   ?+1
	.p0   .tmp0 ?+1
	.narr .narr ?+1
	.narr .p0:0 ?+1
	#Set array pointers.
	.i0   .i0   ?+1
	.i0   .narr ?+1
	.i1   .i1   ?+1
	.i1   .narr ?+1
	.nmod .nmod ?+1
	.nmod .z+1  ?+1
	.mod  .mod  ?+1
	.mod  .z-1  .randloop
.loop:
	.len  .z+1  .done
	#Get a random number in [0,i+1).
.randloop:
	0 ? random.generate
	.rand .rand ?+1
	.rand random.generate.ret ?+1
	.tmp0 .tmp0 ?+1
	.tmp0 random.generate.ret ?+1
	.rem  .rem  ?+1
	.k    .k0   ?+1
	#Caculate [rem]=[rand]%[mod].
.modloop:
	#[tmp0]<<1 and carry into [rem].
	.tmp1 .tmp1 ?+1
	.tmp1 .tmp0 ?+1
	.tmp1 .z+1  ?+1
	.tmp0 .tmp1 ?+4
	.rem  .z-1  ?+1
	#[rem]%[mod]
	.rem  .mod  ?+7
	.rem  .z+1  ?+1
	.tmp1 .tmp1 ?+7
	.rem  .nmod ?+1
	.tmp1 .tmp1 ?+1
	.k    .z+1  .moddone
	#[rem]<<1
	.tmp1 .rem  ?+1
	.rem  .tmp1 .modloop
.moddone:
	#Rejection sampling. Accept if rand-rem<=-mod.
	.nmod .z+1  ?+1
	.rand .rem  ?+1
	.rand .nmod .modaccept
	.nmod .z-1  .randloop
.modaccept:
	#Increment i.
	.i0   .z-1  ?+1
	.i1   .z-1  ?+1
	#Set j=arr+[rand]%(i+1).
	.rem  .j0   ?+1
	.rem  .narr ?+1
	.tmp1 .rem  ?+1
	.j0   .tmp1 ?+1
	.j1   .tmp1 ?+1
	#Swap [i] and [j].
	.tmp0 .tmp0 ?+1
	.tmp0 .i0:0 ?+1
	.tmp1 .tmp1 ?+1
	.tmp1 .j0:0 ?+1
	.tmp1 .tmp0 ?+1  #[tmp1]=[i]-[j]
	.i1:0 .tmp1 ?+1
	.tmp0 .tmp0 ?+1
	.tmp0 .tmp1 ?+1
	.j1:0 .tmp0 ?+1
	#Next loop.
	.mod  .z-1  .loop
.done:
	0     0     .a4:4
#Variables
.tmp0:0
.tmp1:0
.narr:0
.rem:0
.nmod:0
.mod:0
.len:0
.rand:0
.k:0
.k0:0-64
0-1 .z:0 1 2

